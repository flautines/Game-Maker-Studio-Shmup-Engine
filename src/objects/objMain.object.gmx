<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>5000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Declare variables and configure controls
// Define global variables

waitTime=300; //Timer for displaying the credits as the game boots up.
            //Recommended to set to approximately 300 for public builds

debugEnabled = false;

deltaTime = 1;      //Whenever paused, this is set to 0, and 1 when unpaused!
                    //Try multiplying things with this to account for pausing state!
mapSwitchTimer=0;
showLoop = 0; //Timer for displaying which loop the player is on (Set on the last event in the levelEvents() script)

loopCounter = 1; //Keeps track of how many game loops we've done (Starts at 1)
     
global.currentMap = 0; //Reserved for keeping track of the game's current map
global.prevMap = 0; //Reserved for keeping track of the game's previous map
switchingMaps = false; //Turned off at the very end of loadLevel() script
global.state = states.initialize;
global.statePrevious = global.state; //Reserved variable for storing previous state. Useful for pausing/cutscenes
global.pauseTimer=0;

global.font = font_add_sprite(sprFont, ord('!'), false, 0);
gameEndTimer = 40;
startRoomTimer = 0;
startRoomTimerLength = 140;

threwError = false; //Debug flag for the placeSprites() script
cleaningRoom = false; //Flag to prevent any hiccups when resetting the room
lk = 0; //Reserved for storing the last input the player had (specifically for the konCodeInput() script)

global.tick = 0;            //frame counter, increases every frame in step event
global.playerScore = 0;
global.highScore = 57300;   //Arbitrary number. It's the one GR3 uses, lol
global.playerLives = 2;     //Give the player 3 lives [The last life is 0, not 1]


//Equip menu stuff
typeSelect = true;
shieldSelect = 0;
equipTypePos = 1;
equipShieldPos = 0;
equipChangeTimer = 0;
equipTypeBlinkShow = true;
equipShieldBlinkShow = false;
equipBackTimer = 0;

//Keep track of player's arsenal
missileType = 1;
doubleType = 1;
laserType = 1;
optionType = 1;
shieldType = 1;

title = 0;
timer = 0;
fullscreen = false;
resetKey = false;            //Initialization for konCodeInput();





//Parallax night sky
xScroll = 0; //For the bottom-most sky scrolling
//Manually handle the sky background parallax
background_hspeed[0] = -0.2;
background_hspeed[1] = -0.4;
background_hspeed[2] = -0.6;

//As soon as objCamera exists, the above values are added to the below values for parallax offset in relation to objCamera
//This is done to prevent weird graphical hiccups in the middle of map switching, to provide a seamless experience
bg0XParallax = 0;
bg1XParallax = 0;
bg2XParallax = 0;

global.cameraUp = ord('W');
global.cameraDown = ord('S');
global.cameraLeft = ord('A');
global.cameraRight = ord('D');

//Initialize or load game options
if (file_exists("sav"))
{
    ini_open("sav");
    global.bgmVol = real(ini_read_string("Options","bgmVol",75));
    global.sfxVol = real(ini_read_string("Options","sfxVol",75));
    global.grVOptEnabled = real(ini_read_string("Options","grVOptEnabled",false));
    global.keyUp = real(ini_read_string("Options","keyUp",vk_up));
    global.keyDown = real(ini_read_string("Options","keyDown",vk_down));
    global.keyLeft = real(ini_read_string("Options","keyLeft",vk_left));
    global.keyRight = real(ini_read_string("Options","keyRight",vk_right));
    global.keyAction1 = real(ini_read_string("Options","keyAction1",ord('Z')));
    global.keyAction2 = real(ini_read_string("Options","keyAction2",ord('X')));
    global.keyAction3 = real(ini_read_string("Options","keyAction3",ord('C')));
    global.keyPause = real(ini_read_string("Options","keyPause",vk_enter));
    global.highScore = real(ini_read_string("Game Data","HiScore",57300));
    windowSize = real(ini_read_string("Options","windowSize",2));
    ini_close();
}
else
{
    global.bgmVol = 75;
    global.sfxVol = 75;
    global.keyUp = vk_up;
    global.keyDown = vk_down;
    global.keyLeft = vk_left;
    global.keyRight = vk_right;
    global.keyAction1 = ord('Z');
    global.keyAction2 = ord('X');
    global.keyAction3 = ord('C');
    global.keyPause = vk_enter;
    global.grVOptEnabled = false;
    windowSize = 2;
    ini_open("sav");
    ini_write_string("Options","bgmVol",string(75));
    ini_write_string("Options","sfxVol",string(75));
    ini_write_string("Options","grVOptEnabled",string(false));
    ini_write_string("Options","keyUp",string(vk_up));
    ini_write_string("Options","keyDown",string(vk_down));
    ini_write_string("Options","keyLeft",string(vk_left));
    ini_write_string("Options","keyRight",string(vk_right));
    ini_write_string("Options","keyAction1",string(ord('Z')));
    ini_write_string("Options","keyAction2",string(ord('X')));
    ini_write_string("Options","keyAction3",string(ord('C')));
    ini_write_string("Options","keyPause",string(vk_enter));
    ini_write_string("Options","windowSize",string(2));
    ini_close();
}

window_set_size(256*windowSize,256*windowSize);

//Initialize sounds
global.currentSong=0;       
rememberBGM = true; //Flag to remember which song was last played
global.prevSong=0; //Song to remember, if the previous was true.
bgmFadeoutMultiplier = 1; //To handle song fadeout
songStream = 0;  //Keeps track of how far into the song we are (for looping in handleBGM();)

audio_group_load(sfxMenu);
audio_sound_gain(global.currentSong, (global.bgmVol/100), 0);
audio_group_set_gain(sfxMenu, (global.sfxVol/100), 0);
audio_group_set_gain(sfxInGame, (global.sfxVol/100), 0);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Declare tiletype constants
//Assume every piece of the array represents a 16x16 tile
/*
List:
    blank,
    solid,
*/

//Below is Row 1

tiletypes[0] = "blank";
tiletypes[1] = "blank";
tiletypes[2] = "blank";
tiletypes[3] = "blank";
tiletypes[4] = "solid";
tiletypes[5] = "solid";
tiletypes[6] = "solid";
tiletypes[7] = "blank";
tiletypes[8] = "blank";
tiletypes[9] = "blank";
tiletypes[10] = "blank";
tiletypes[11] = "blank";
tiletypes[12] = "blank";
tiletypes[13] = "blank";
tiletypes[14] = "blank";
tiletypes[15] = "blank";
//below is Row 2
tiletypes[16] = "blank";
tiletypes[17] = "blank";
tiletypes[18] = "blank";
tiletypes[19] = "blank";
tiletypes[20] = "solid";
tiletypes[21] = "solid";
tiletypes[22] = "solid";
tiletypes[23] = "solid";
tiletypes[24] = "solid";
tiletypes[25] = "blank";
tiletypes[26] = "blank";
tiletypes[27] = "blank";
tiletypes[28] = "blank";
tiletypes[29] = "blank";
tiletypes[30] = "blank";
tiletypes[31] = "blank";
//Below is Row 3
tiletypes[32] = "blank";
tiletypes[33] = "blank";
tiletypes[34] = "blank";
tiletypes[35] = "blank";
tiletypes[36] = "blank";
tiletypes[37] = "blank";
tiletypes[38] = "blank";
tiletypes[39] = "blank";
tiletypes[40] = "blank";
tiletypes[41] = "blank";
tiletypes[42] = "blank";
tiletypes[43] = "blank";
tiletypes[44] = "blank";
tiletypes[45] = "blank";
tiletypes[46] = "blank";
tiletypes[47] = "blank";
//Below is Row 4
tiletypes[48] = "blank";
tiletypes[49] = "sign";
tiletypes[50] = "blank";
tiletypes[51] = "blank";
tiletypes[52] = "blank";
tiletypes[53] = "blank";
tiletypes[54] = "blank";
tiletypes[55] = "blank";
tiletypes[56] = "blank";
tiletypes[57] = "blank";
tiletypes[58] = "blank";
tiletypes[59] = "blank";
tiletypes[60] = "blank";
tiletypes[61] = "blank";
tiletypes[62] = "blank";
tiletypes[63] = "blank";
//Below is Row 5
tiletypes[64] = "blank";
tiletypes[65] = "blank";
tiletypes[66] = "blank";
tiletypes[67] = "blank";
tiletypes[68] = "blank";
tiletypes[69] = "blank";
tiletypes[70] = "blank";
tiletypes[71] = "blank";
tiletypes[72] = "blank";
tiletypes[73] = "blank";
tiletypes[74] = "blank";
tiletypes[75] = "blank";
tiletypes[76] = "blank";
tiletypes[77] = "blank";
tiletypes[78] = "blank";
tiletypes[79] = "blank";
//Below is Row 6
tiletypes[80] = "blank";
tiletypes[81] = "blank";
tiletypes[82] = "blank";
tiletypes[83] = "blank";
tiletypes[84] = "blank";
tiletypes[85] = "blank";
tiletypes[86] = "blank";
tiletypes[87] = "blank";
tiletypes[88] = "blank";
tiletypes[89] = "blank";
tiletypes[90] = "blank";
tiletypes[91] = "blank";
tiletypes[92] = "blank";
tiletypes[93] = "blank";
tiletypes[94] = "blank";
tiletypes[95] = "blank";
//Below is Row 7
tiletypes[96] = "blank";
tiletypes[97] = "blank";
tiletypes[98] = "blank";
tiletypes[99] = "blank";
tiletypes[100] = "blank";
tiletypes[101] = "blank";
tiletypes[102] = "solid";
tiletypes[103] = "solid";
tiletypes[104] = "solid";
tiletypes[105] = "solid";
tiletypes[106] = "solid";
tiletypes[107] = "solid";
tiletypes[108] = "blank";
tiletypes[109] = "blank";
tiletypes[110] = "blank";
tiletypes[111] = "blank";
//Below is Row 8
tiletypes[112] = "blank";
tiletypes[113] = "blank";
tiletypes[114] = "blank";
tiletypes[115] = "blank";
tiletypes[116] = "blank";
tiletypes[117] = "solid";
tiletypes[118] = "solid";
tiletypes[119] = "solid";
tiletypes[120] = "solid";
tiletypes[121] = "solid";
tiletypes[122] = "solid";
tiletypes[123] = "blank";
tiletypes[124] = "blank";
tiletypes[125] = "blank";
tiletypes[126] = "blank";
tiletypes[127] = "blank";
//Below is Row 9
tiletypes[128] = "blank";
tiletypes[129] = "blank";
tiletypes[130] = "blank";
tiletypes[131] = "blank";
tiletypes[132] = "blank";
tiletypes[133] = "blank";
tiletypes[134] = "blank";
tiletypes[135] = "blank";
tiletypes[136] = "blank";
tiletypes[137] = "blank";
tiletypes[138] = "blank";
tiletypes[139] = "blank";
tiletypes[140] = "blank";
tiletypes[141] = "blank";
tiletypes[142] = "blank";
tiletypes[143] = "blank";
//Below is Row 10
tiletypes[144] = "blank";
tiletypes[145] = "blank";
tiletypes[146] = "blank";
tiletypes[147] = "blank";
tiletypes[148] = "blank";
tiletypes[149] = "blank";
tiletypes[150] = "blank";
tiletypes[151] = "blank";
tiletypes[152] = "blank";
tiletypes[153] = "blank";
tiletypes[154] = "blank";
tiletypes[155] = "blank";
tiletypes[156] = "blank";
tiletypes[157] = "blank";
tiletypes[158] = "blank";
tiletypes[159] = "blank";
//Below is Row 11
tiletypes[160] = "blank";
tiletypes[161] = "blank";
tiletypes[162] = "blank";
tiletypes[163] = "blank";
tiletypes[164] = "blank";
tiletypes[165] = "blank";
tiletypes[166] = "blank";
tiletypes[167] = "blank";
tiletypes[168] = "blank";
tiletypes[169] = "blank";
tiletypes[170] = "blank";
tiletypes[171] = "blank";
tiletypes[172] = "blank";
tiletypes[173] = "blank";
tiletypes[174] = "blank";
tiletypes[175] = "blank";
//Below is Row 12
tiletypes[176] = "blank";
tiletypes[177] = "blank";
tiletypes[178] = "blank";
tiletypes[179] = "blank";
tiletypes[180] = "blank";
tiletypes[181] = "blank";
tiletypes[182] = "blank";
tiletypes[183] = "blank";
tiletypes[184] = "blank";
tiletypes[185] = "blank";
tiletypes[186] = "blank";
tiletypes[187] = "blank";
tiletypes[188] = "blank";
tiletypes[189] = "blank";
tiletypes[190] = "blank";
tiletypes[191] = "blank";
//Below is Row 13
tiletypes[192] = "blank";
tiletypes[193] = "blank";
tiletypes[194] = "blank";
tiletypes[195] = "blank";
tiletypes[196] = "blank";
tiletypes[197] = "blank";
tiletypes[198] = "blank";
tiletypes[199] = "blank";
tiletypes[200] = "blank";
tiletypes[201] = "blank";
tiletypes[202] = "blank";
tiletypes[203] = "blank";
tiletypes[204] = "blank";
tiletypes[205] = "blank";
tiletypes[206] = "blank";
tiletypes[207] = "blank";
//Below is Row 14
tiletypes[208] = "blank";
tiletypes[209] = "blank";
tiletypes[210] = "solid";
tiletypes[211] = "solid";
tiletypes[212] = "solid";
tiletypes[213] = "blank";
tiletypes[214] = "blank";
tiletypes[215] = "blank";
tiletypes[216] = "blank";
tiletypes[217] = "blank";
tiletypes[218] = "blank";
tiletypes[219] = "blank";
tiletypes[220] = "blank";
tiletypes[221] = "blank";
tiletypes[222] = "blank";
tiletypes[223] = "blank";
//Below is Row 15
tiletypes[224] = "blank";
tiletypes[225] = "blank";
tiletypes[226] = "blank";
tiletypes[227] = "blank";
tiletypes[228] = "blank";
tiletypes[229] = "blank";
tiletypes[230] = "blank";
tiletypes[231] = "blank";
tiletypes[232] = "blank";
tiletypes[233] = "blank";
tiletypes[234] = "blank";
tiletypes[235] = "blank";
tiletypes[236] = "blank";
tiletypes[237] = "blank";
tiletypes[238] = "blank";
tiletypes[239] = "blank";
//Below is Row 16
tiletypes[240] = "blank";
tiletypes[241] = "blank";
tiletypes[242] = "blank";
tiletypes[243] = "blank";
tiletypes[244] = "blank";
tiletypes[245] = "blank";
tiletypes[246] = "blank";
tiletypes[247] = "blank";
tiletypes[248] = "blank";
tiletypes[249] = "blank";
tiletypes[250] = "blank";
tiletypes[251] = "blank";
tiletypes[252] = "blank";
tiletypes[253] = "blank";
tiletypes[254] = "blank";
tiletypes[255] = "blank";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle game states and window re-sizing
switch(global.state) //Game mode handling
{
    case states.initialize: // initial state
    //Turn off the night sky (in case we were to reset the game)
    background_visible[0] = false;
    background_visible[1] = false;
    background_visible[2] = false;
    if global.tick==1{audio_play_sound(itsjoke,1,false);}
    if global.tick&gt;=waitTime+30
    {global.state=1; instance_create(8*8,8*5,objTitle);} //changeBGM(bgmTitle,true);
    levelData = 0;
    levelDataLayer2 = 0;
    levelDataSprites = 0;
    extFiles=false;
        break;
    case states.titleScreen: // title
    //Turn on the night sky
    background_visible[0] = true;
    background_visible[1] = true;
    background_visible[2] = true;
        break;
    case states.gameMode: // game mode
    case states.cutscene: // cutscene mode
        handleBGM();

        //Handle pausing
        if (keyboard_check_pressed(global.keyPause) &amp;&amp; global.pauseTimer&lt;=0)
        {
            if instance_exists(objPlayer)
            {
                if (!objPlayer.dead)
                {
                deltaTime = 0;
                //Only allow pausing if we haven't died
                audio_pause_sound(global.currentSong);
                global.statePrevious=global.state;
                global.state=5;
                global.pauseTimer=10;
                objCamera.scrollXPrevious=objCamera.scrollX;
                objCamera.scrollYPrevious=objCamera.scrollY;
                objCamera.scrollX=0;
                objCamera.scrollY=0;
                
                //Freeze the parallax night sky
                background_hspeed[0] = 0;
                background_hspeed[1] = 0;
                background_hspeed[2] = 0;
                }
            }
        }
        break;
    case states.startRoom: // START screen
        handleBGM();
        if startRoomTimer&gt;0{startRoomTimer--;}
        if startRoomTimer&lt;=0 {global.state = states.gameMode;}
        break;
    case states.paused: // paused
        //Handle Unpausing
        konCodeInput(); //huhuh
        if (keyboard_check_pressed(global.keyPause) &amp;&amp; !keyboard_check(vk_alt) &amp;&amp; global.pauseTimer&lt;=0)
        {
        deltaTime = 1;
        audio_resume_sound(global.currentSong);
        global.state=global.statePrevious;
        global.statePrevious=5;
        global.pauseTimer=10;
        objCamera.scrollX = objCamera.scrollXPrevious;
        objCamera.scrollY = objCamera.scrollYPrevious;        
        //Unfreeze the parallax night sky
        background_hspeed[0] = -0.2;
        background_hspeed[1] = -0.4;
        background_hspeed[2] = -0.6;
        }
        break;
    case states.gameOver: // game over
        break;
    default: // edge case; do nothing
        break;
}

if (global.pauseTimer&gt;0)
{global.pauseTimer--;}

if (keyboard_check(vk_escape))
    {
    if instance_exists(objTitle)
        {
        if objTitle.currentMenu==0
            {
                gameEndTimer--;
                if gameEndTimer&lt;=0
                    {
                    game_end();
                    }
            }
        }
        else
        {
    
        gameEndTimer--;
        if gameEndTimer&lt;=0
            {
            game_end();
            }
        }
    }
else{gameEndTimer=40;}


if (timer &lt;= 0)
        {
            if (keyboard_check_pressed(ord('2')) &amp;&amp; windowSize!=2)
            {
                windowSize = 2;
                window_set_size(256*windowSize,256*windowSize);
                timer = 10;
            }
            else if (keyboard_check_pressed(ord('1')) &amp;&amp; windowSize!=1)
            {
                windowSize = 1;
                window_set_size(256*windowSize,256*windowSize);
                timer = 10;
            }
            else if (keyboard_check_pressed(ord('3')) &amp;&amp; windowSize!=3)
            {
                windowSize = 3;
                window_set_size(256*windowSize,256*windowSize);
                timer = 10;
            }
            else if (keyboard_check(vk_alt)&amp;&amp;keyboard_check_pressed(vk_enter))
            {
                fullscreen = !fullscreen;
                window_set_fullscreen(fullscreen);
                timer = 10;
            }
        }
        else
        {
            timer--;
        }

global.tick++;
if (mapSwitchTimer&gt;0){mapSwitchTimer-=deltaTime;}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle highscore
if (global.playerScore &gt; global.highScore)
{global.highScore = global.playerScore}

//TODO
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle item equip screen
if (global.state==states.equipScreen)
{
    if !audio_is_playing(BGM03)
    {
        changeBGM(BGM03,true);
    }
    
    //Get input
    var keyLeft = -keyboard_check_pressed(global.keyLeft);
    var keyRight = (keyboard_check_pressed(global.keyRight));
    var moveX = keyLeft+keyRight;
    var keyUp = -keyboard_check_pressed(global.keyUp);
    var keyDown = (keyboard_check_pressed(global.keyDown));
    var moveY = keyUp+keyDown;
    var gameStart = false;
    
    if equipChangeTimer&gt;1{equipChangeTimer--;}
    if equipBackTimer&gt;1{equipBackTimer--;}

    if (equipChangeTimer==1 || equipBackTimer==1)
    {
        if (menuProgressedLast==1){shieldSelect++;}
        if (menuProgressedLast==2){shieldSelect--;}
        menuProgressedLast = 0;
        equipChangeTimer=0;
        equipBackTimer=0;
    }
    
    if ((keyboard_check_pressed(global.keyAction2) || keyboard_check_pressed(global.keyPause)) &amp;&amp; equipChangeTimer&lt;=0 &amp;&amp; equipBackTimer&lt;=0 &amp;&amp; shieldSelect&lt;2)
    {
        audio_stop_sound(sfxMenuAccept);
        audio_stop_sound(sfxMenuCancel);
        audio_play_sound(sfxMenuAccept,0,false);
        equipChangeTimer=50;
        menuProgressedLast=1;
    }
    
    if (keyboard_check_pressed(global.keyAction1) &amp;&amp; shieldSelect&gt;0 &amp;&amp; equipBackTimer&lt;=0 &amp;&amp; equipChangeTimer&lt;=0)
    {
        audio_stop_sound(sfxMenuCancel);
        audio_play_sound(sfxMenuCancel,0,false);
        equipBackTimer=15;
        menuProgressedLast=2;
    }
    
    if (typeSelect)
    {
        if (shieldSelect==0)
        {
            if (equipChangeTimer&lt;=0)
            {
                if (moveY==1) {audio_stop_sound(sfxMenuTweak); audio_play_sound(sfxMenuTweak,0,false); equipTypePos++;}
                if (moveY==-1) {audio_stop_sound(sfxMenuTweak); audio_play_sound(sfxMenuTweak,0,false); equipTypePos--;}
            }
            
            if (equipTypePos&lt;1){equipTypePos=4;}
            if (equipTypePos&gt;4){equipTypePos=1;}
        
            switch(equipTypePos)
            {
                case 1:
                    missileType = 1;
                    doubleType = 1;
                    laserType = 1;
                    optionType = 1;
                    break;
                case 2:
                    missileType = 1;    // 2-way
                    doubleType = 2;     // Tail gun
                    laserType = 1;      // Ripple
                    optionType = 1;     // Option
                    break;
                case 3:
                    missileType = 1;    // Spread Bomb
                    doubleType = 3;     // Vertical
                    laserType = 3;      // C-Laser
                    optionType = 1;     // Option
                    break;
                case 4:
                    missileType = 1;    // Photon Torpedo
                    doubleType = 4;     // Back Double
                    laserType = 1;      // Twin Laser
                    optionType = 1;     // Option
                    break;
                default:
                    break;
            }
        }
        if (shieldSelect==1)
        {
            if (equipChangeTimer&lt;=0)
            {
                if (moveX==1) {audio_stop_sound(sfxMenuTweak); audio_play_sound(sfxMenuTweak,0,false); equipShieldPos++;}
                if (moveX==-1) {audio_stop_sound(sfxMenuTweak); audio_play_sound(sfxMenuTweak,0,false); equipShieldPos--;}
            }
            //Wrap around
            if (equipShieldPos&gt;1) {equipShieldPos = 0;}
            if (equipShieldPos&lt;0) {equipShieldPos = 1;}
            
            //Finally, assign the shield type
            if (equipShieldPos==0){shieldType = 0;} //Shield
            if (equipShieldPos==1){shieldType = 1;} //Force Field
        }
    }
    
    
    
    
    
    
    if (typeSelect &amp;&amp; shieldSelect&gt;1 &amp;&amp; equipChangeTimer&lt;=0)
    {gameStart=true;}
    
    if (gameStart)
    {
        instance_create(-256,0,objCamera);
        instance_create(objCamera.x+128,128,objPlayer);
        instance_create(objPlayer.x,objPlayer.y,objPlayerCapsuleHitbox);
        audio_group_unload(sfxMenu);
        audio_group_load(sfxInGame);
        loadLevel("map00.oel");
        global.prevMap = "map00.oel";
        audio_stop_sound(global.currentSong);
        changeBGM(BGM00,false);
        objMain.x = objCamera.x;
        objMain.y = objCamera.y;
        global.state = states.startRoom;
        objMain.startRoomTimer = objMain.startRoomTimerLength;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle game closing (if objCamera doesn't exist yet)
draw_enable_alphablend(false);

if !instance_exists(objCamera)
{
    draw_set_alpha(1);
    if (gameEndTimer&lt;40 &amp;&amp; gameEndTimer&gt;=30)
    {
    draw_rectangle_color(x, y, x+159, y+8, c_black, c_black, c_black, c_black, false);
    draw_set_color(c_white);
    draw_text(x,y,"Closing the game");
    }
    else if (gameEndTimer&lt;30 &amp;&amp; gameEndTimer&gt;=20)
    {
    draw_rectangle_color(x, y, x+159, y+8, c_black, c_black, c_black, c_black, false);
    draw_set_color(c_white);
    draw_text(x,y,"Closing the game.");
    }
    else if (gameEndTimer&lt;20 &amp;&amp; gameEndTimer&gt;=10)
    {
    draw_rectangle_color(x, y, x+159, y+8, c_black, c_black, c_black, c_black, false);
    draw_set_color(c_white);
    draw_text(x,y,"Closing the game..");
    }
    else if (gameEndTimer&lt;10)
    {
    draw_rectangle_color(x, y, x+159, y+8, c_black, c_black, c_black, c_black, false);
    draw_set_color(c_white);
    draw_text(x,y,"Closing the game...");
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle Intro and set font
draw_enable_alphablend(false);

if global.tick==5||global.tick==6
{
draw_set_color(c_white);
draw_rectangle(-8,128,290,140,false);
}
else if global.tick==8||global.tick==9
{
draw_set_color(c_gray);
draw_rectangle(-8,40,290,42,false);
}

draw_set_font(global.font);

if global.tick&lt;=waitTime+10
{
draw_set_color(c_white);
draw_set_alpha(1);
draw_text(8*5,8*12,"    Gradius Engine#         v1.1##          by##     mysterypaint#");
}

//Fade out on top of the text
draw_enable_alphablend(true);
draw_set_color(c_black);

if global.tick&lt;=15 || (global.tick &gt;waitTime+5 &amp;&amp; global.tick &lt;=waitTime+10)
{
draw_set_alpha(0.8);
draw_rectangle(-1,16,257,257,false);
}
else if (global.tick&gt;15 &amp;&amp; global.tick&lt;=20) || (global.tick&gt;waitTime &amp;&amp; global.tick&lt;=waitTime+5)
{
draw_set_alpha(0.4);
draw_rectangle(-1,16,257,257,false);
}
else if global.tick&gt;20 &amp;&amp; global.tick&lt;=waitTime
{
draw_set_alpha(0);
draw_rectangle(-1,16,257,257,false);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle item equip screen

if (global.state==states.equipScreen)
{
    //For optimization purposes.
    //You can read more about this here: http://www.yoyogames.com/blog/23
    draw_enable_alphablend(false);

    draw_set_color(c_black);
    draw_rectangle(-32,-32,500,500,false);
    draw_background(weaponSelect,0,0);
    draw_enable_alphablend(true);
    
    if (equipChangeTimer%5==0)
    {
    equipTypeBlinkShow = !equipTypeBlinkShow;
    equipShieldBlinkShow = !equipShieldBlinkShow;
    }
    
    //Equip menu stuff
    if (typeSelect)
    {
        if (equipTypeBlinkShow || equipChangeTimer&lt;=0  || shieldSelect!=0)
        {
            draw_sprite(sprEquipHighlight,0,14,26+(equipTypePos*32));                           //Top-Left
            draw_sprite_ext(sprEquipHighlight,0,241,26+(equipTypePos*32),-1,1,0,c_white,1);     //Top-Right
            draw_sprite_ext(sprEquipHighlight,0,14,54+(equipTypePos*32),1,-1,0,c_white,1);      //Bottom-Left
            draw_sprite_ext(sprEquipHighlight,0,241,54+(equipTypePos*32),-1,-1,0,c_white,1);    //Bottom-Right
            
            draw_set_color(c_green);
            draw_rectangle(16,24+(equipTypePos*32),238,24+(equipTypePos*32),false);     //Upper
            draw_rectangle(13,27+(equipTypePos*32),13,52+(equipTypePos*32),false);      //Left
            draw_rectangle(241,27+(equipTypePos*32),241,52+(equipTypePos*32),false);    //Right
            draw_rectangle(16,55+(equipTypePos*32),238,55+(equipTypePos*32),false);     //Lower
        }
    }
    
    
    if (equipShieldBlinkShow || equipChangeTimer&lt;=0 || shieldSelect!=1)
    {
    draw_sprite(sprEquipHighlight,0,153+(equipShieldPos*48),188);                         //Top-Left
    draw_sprite_ext(sprEquipHighlight,0,183+(equipShieldPos*48),188,-1,1,0,c_white,1);    //Top-Right
    draw_sprite_ext(sprEquipHighlight,0,153+(equipShieldPos*48),214,1,-1,0,c_white,1);    //Bottom-Left
    draw_sprite_ext(sprEquipHighlight,0,183+(equipShieldPos*48),214,-1,-1,0,c_white,1);   //Bottom-Right
    
    draw_set_color(c_green);
    
    draw_rectangle(155+(equipShieldPos*48),186,180+(equipShieldPos*48),186,false);     //Upper
    draw_rectangle(152+(equipShieldPos*48),190,152+(equipShieldPos*48),211,false);     //Left
    draw_rectangle(183+(equipShieldPos*48),190,183+(equipShieldPos*48),211,false);     //Right
    draw_rectangle(155+(equipShieldPos*48),215,180+(equipShieldPos*48),215,false);     //Lower
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
