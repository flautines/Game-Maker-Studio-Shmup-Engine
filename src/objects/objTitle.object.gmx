<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprTitleLogo</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Code optimization attempt for title menu
//You can read more about this here: http://www.yoyogames.com/blog/23

draw_texture_flush();
draw_sprite(sprFont, 0, 0, 0);
draw_sprite(sprCursor, 0, 0, 0);
draw_sprite(sprTitleLogo, 0, 0, 0);
draw_sprite(sprStart, 0, 0, 0);
draw_sprite(sky1, 0, 0, 0);
draw_sprite(sky2, 0, 0, 0);
draw_sprite(sky3, 0, 0, 0);
draw_sprite(sprEquipHighlight, 0, 0, 0);
draw_sprite(weaponSelect, 0, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Declare some variables
sineX = x + 4 * sin(2 * pi * global.tick / 150);

currentMenu=0; //Keeps track of which menu we're on
currentConfig=0; //Keeps track of where we are in the button configuration screen
configCount=0; //Counts how many buttons were set on the config screen

menu[0] = "Start";
menu[1] = "Options";
menu[2] = "Quit";

menu2[0] = "BGM Vol: " + string(global.bgmVol);
menu2[1] = "SFX Vol: " + string(global.sfxVol);
menu2[2] = "GRV Options: " + string(global.grVOptEnabled);
menu2[3] = "Friendly Mode: " + string(global.frModeEnabled);
menu2[4] = "Window Size: " + string(objMain.windowSize) + "x";
menu2[5] = "Set Config";
menu2[6] = "Apply Changes";
menu2[7] = "Back";

pressStartText=true;

space = 8;
mpos = 3; //menu position initialization
blinkTimer=0;
holdLength=20;
holdTimer=0;

prevBGMVol=0;
prevSFXVol=0;
prevWindowSize=0;
prevKeyUp = global.keyUp;
prevKeyDown = global.keyDown;
prevKeyLeft = global.keyLeft;
prevKeyRight = global.keyRight;
prevKeyAction1 = global.keyAction1;
prevKeyAction2 = global.keyAction2;
prevKeyPause = global.keyPause;

moveYPressed=0;
holdYTimer=20;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sineX = x + 4 * sin(2 * pi * global.tick / 150);


//Handle the menu

//Declare some controller inputs
var pushConfirm;
pushConfirm = max(keyboard_check_pressed(ord('K')),keyboard_check_pressed(ord('H')),keyboard_check_pressed(vk_enter),keyboard_check_pressed(ord('X')),0)
var pushCancel;
pushCancel = max(keyboard_check_pressed(ord('J')),keyboard_check_pressed(vk_escape),keyboard_check_pressed(ord('Z')),0)

var moveY=0;
var moveYPressed=0;
moveYPressed -= max(keyboard_check_pressed(ord('W')),keyboard_check_pressed(vk_up),0);
moveYPressed += max(keyboard_check_pressed(ord('S')),keyboard_check_pressed(vk_down),0);
moveY -= max(keyboard_check(ord('W')),keyboard_check(vk_up),0);
moveY += max(keyboard_check(ord('S')),keyboard_check(vk_down),0);



var moveX=0;
var moveXPressed=0;
moveX -= max(keyboard_check(ord('A')),keyboard_check(vk_left),0);
moveX += max(keyboard_check(ord('D')),keyboard_check(vk_right),0);
moveXPressed -= max(keyboard_check_pressed(ord('A')),keyboard_check_pressed(vk_left),0);
moveXPressed += max(keyboard_check_pressed(ord('D')),keyboard_check_pressed(vk_right),0);



if currentMenu!=0 &amp;&amp; currentMenu!=3
{
    if moveY!=0
    {
    if moveYPressed!=0
        {audio_stop_sound(sfxCursorMove);audio_play_sound(sfxCursorMove,1,false);
        holdYTimer=holdLength;
        //move the cursor based on our move input
        mpos += moveYPressed;
        }
        
        if holdYTimer&lt;=0
        {
        holdYTimer=5; //rate we can auto-scroll by
        audio_stop_sound(sfxCursorMove);audio_play_sound(sfxCursorMove,1,false);
        mpos += moveY;
        }
        //ensure we're wrapping around the menu
        if currentMenu==1
        {
            if (mpos &lt; 0) mpos = array_length_1d(menu) - 1 ;
            if (mpos &gt; array_length_1d(menu) - 1) mpos = 0 ;
        }
            else if currentMenu==2
        {
            if (mpos &lt; 0) mpos = array_length_1d(menu2) - 1 ;
            if (mpos &gt; array_length_1d(menu2) - 1) mpos = 0 ;
        }
    }
}
else{holdYTimer=holdLength;holdTimer=holdLength;}

if !(keyboard_check(vk_alt) &amp;&amp; keyboard_check(vk_enter))   //Prevent menu navigation if we're toggling fullscreen
{
    if (pushConfirm == 1)
    {
        if currentMenu!=0 &amp;&amp; currentMenu!=3
            {menuExecute();}
        else if currentMenu==0
        {
            audio_stop_sound(sfxMenuStart);audio_play_sound(sfxMenuStart,1,false);
            pressStartText=false;currentMenu++;mpos=0;
        }
            
    }
    else if (pushCancel == 1)
        {
            holdTimer=holdLength;holdYTimer=holdLength;
            if currentMenu!=0 &amp;&amp; currentMenu!=3 {audio_stop_sound(sfxMenuCancel);audio_play_sound(sfxMenuCancel,1,false);}
            if currentMenu==1{pressStartText=true;blinkTimer=18;}
            if currentMenu==2{mpos=0;currentMenu-=1;global.bgmVol=prevBGMVol;global.sfxVol=prevSFXVol;objMain.windowSize=prevWindowSize;window_set_size(256*objMain.windowSize,256*objMain.windowSize);
                                global.keyUp = prevKeyUp;global.keyDown = prevKeyDown;global.keyLeft = prevKeyLeft;global.keyRight = prevKeyRight;global.keyAction1 = prevKeyAction1;global.keyAction2 = prevKeyAction2;global.keyAction3 = prevKeyAction3;global.keyPause = prevKeyPause;}
            else if currentMenu!=0 &amp;&amp; currentMenu!=3{currentMenu--;mpos=0;} //just in case i add other menus
        }
    }


if currentMenu==2
{
    var grVOptText = "Off";
    var frModeText = "Off";
    if (global.grVOptEnabled) {grVOptText = "On";}
    if (global.frModeEnabled) {frModeText = "On";}
    menu2[0] = "BGM Vol: " + string(global.bgmVol);
    menu2[1] = "SFX Vol: " + string(global.sfxVol);
    menu2[2] = "GRV Options: " + grVOptText;
    menu2[3] = "Friendly Mode: " + frModeText;
    menu2[4] = "Window Size: " + string(objMain.windowSize) + "x";
    if moveY==0
    {
        if mpos==0
        {
            //handle BGM vol
            if moveXPressed&lt;0
            {
                if global.bgmVol&gt;0
                {
                audio_stop_sound(sfxMenuTweak);audio_play_sound(sfxMenuTweak,1,false);
                global.bgmVol--;
                holdTimer=holdLength;
                }
            }
            else if moveXPressed&gt;0
            {
                if global.bgmVol&lt;100
                {
                audio_stop_sound(sfxMenuTweak);audio_play_sound(sfxMenuTweak,1,false);
                global.bgmVol++;
                holdTimer=holdLength;
                }
            }
            if moveX&lt;0 &amp;&amp; holdTimer&lt;=0
            {
                if global.bgmVol&gt;0
                {
                audio_stop_sound(sfxMenuTweak);audio_play_sound(sfxMenuTweak,1,false);
                global.bgmVol--;
                }
            }
            if moveX&gt;0 &amp;&amp; holdTimer&lt;=0
            {
                if global.bgmVol&lt;100
                {
                audio_stop_sound(sfxMenuTweak);audio_play_sound(sfxMenuTweak,1,false);
                global.bgmVol++;
                }
            }
        }
        if mpos==1
        {
            //handle SFX vol
            if moveXPressed&lt;0
                {
                    if global.sfxVol&gt;0
                    {
                    audio_stop_sound(sfxMenuTweak);audio_play_sound(sfxMenuTweak,1,false);
                    global.sfxVol-=1;
                    holdTimer=holdLength;
                    }
                }
            else if moveXPressed&gt;0
                {
                    if global.sfxVol&lt;100
                    {
                    audio_stop_sound(sfxMenuTweak);audio_play_sound(sfxMenuTweak,1,false);
                    global.sfxVol+=1;
                    holdTimer=holdLength;
                    }
                }
            if moveX&lt;0 &amp;&amp; holdTimer&lt;=0
            {
                if global.sfxVol&gt;0
                {
                audio_stop_sound(sfxMenuTweak);audio_play_sound(sfxMenuTweak,1,false);
                global.sfxVol--;
                }
            }
            if moveX&gt;0 &amp;&amp; holdTimer&lt;=0
            {
                if global.sfxVol&lt;100
                {
                audio_stop_sound(sfxMenuTweak);audio_play_sound(sfxMenuTweak,1,false);
                global.sfxVol++;
                }
            }
        }
        if mpos==2
        {
            //Handle GRV-style Options
            if moveXPressed&lt;0
                {
                    audio_stop_sound(sfxMenuTweak);audio_play_sound(sfxMenuTweak,1,false);
                    global.grVOptEnabled=!global.grVOptEnabled;
                }
            else if moveXPressed&gt;0
                {
                    audio_stop_sound(sfxMenuTweak);audio_play_sound(sfxMenuTweak,1,false);
                    global.grVOptEnabled=!global.grVOptEnabled;
                }
        }
        if mpos==3
        {
            //Handle GRV-style Options
            if moveXPressed&lt;0
                {
                    audio_stop_sound(sfxMenuTweak);audio_play_sound(sfxMenuTweak,1,false);
                    global.frModeEnabled=!global.frModeEnabled;
                }
            else if moveXPressed&gt;0
                {
                    audio_stop_sound(sfxMenuTweak);audio_play_sound(sfxMenuTweak,1,false);
                    global.frModeEnabled=!global.frModeEnabled;
                }
        }
        if mpos==4
        {
            //handle windowSize
            if moveXPressed&lt;0
                {
                    if objMain.windowSize&gt;1
                    {
                    with(objMain)
                        {
                        audio_stop_sound(sfxMenuTweak);audio_play_sound(sfxMenuTweak,1,false);
                        windowSize-=1;
                        window_set_size(256*windowSize,256*windowSize);
                        timer = 10;
                        }
                    }
                }
            else if moveXPressed&gt;0
                {
                    if objMain.windowSize&lt;3
                    {
                    with(objMain)
                        {
                        audio_stop_sound(sfxMenuTweak);audio_play_sound(sfxMenuTweak,1,false);
                        windowSize+=1;
                        window_set_size(256*windowSize,256*windowSize);
                        timer = 10;
                        }
                    }
                }
        }
    }
}

if currentMenu==3&amp;&amp;keyboard_check_pressed(vk_escape)
{
    //Panic-Quit the custom controls menu.
    audio_stop_sound(sfxMenuCancel);audio_play_sound(sfxMenuCancel,1,false);
    currentConfig=0; mpos = 4; currentMenu=2; configCount=0;
    global.keyUp = prevKeyUp;global.keyDown = prevKeyDown;global.keyLeft = prevKeyLeft;global.keyRight = prevKeyRight;global.keyAction1 = prevKeyAction1;global.keyAction2 = prevKeyAction2;global.keyAction3 = prevKeyAction3;global.keyPause = prevKeyPause;
}


if audio_sound_get_gain(global.currentSong) != (global.bgmVol/100)
   {
   audio_sound_gain(global.currentSong, (global.bgmVol/100), 0);
   }


   audio_group_set_gain(sfxMenu, (global.sfxVol/100), 0);
   audio_group_set_gain(sfxInGame, (global.sfxVol/100), 0);


if holdTimer&gt;0
{
holdTimer--;
}

if holdYTimer&gt;0
{
holdYTimer--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the title
draw_enable_alphablend(false);
draw_sprite(sprTitleLogo, 0, x, y);
draw_enable_alphablend(true);

//Draw our title
//draw_set_halign(fa_left);
//draw_set_valign(fa_middle);
draw_set_color($ff33cc);
draw_set_alpha(1);
//draw_text(0,0,string(mpos));

if pressStartText==false &amp;&amp; currentMenu!=3
{
    var m;
    
    if currentMenu==1
    {
        for (m=0; m &lt; array_length_1d(menu); m++;)
        {
        draw_text(x+space,(y+m*space)+64,string(menu[m]));
        }
    }
    if currentMenu==2
    {
        for (m=0; m &lt; array_length_1d(menu2); m++;)
        {
        draw_set_color($ff33cc);
        draw_text(x+space,(y+m*space)+64,string(menu2[m]));
        
        draw_set_color($cc4488);
        if mpos==0
            {
            draw_text(x-(8*6),y+(8*19),"Set the global BGM volume.");
            }
        else if mpos==1
        {
        draw_text(x-(8*6),y+(8*19),"Set the global SFX volume.");
        }
        else if mpos==2
            {
            draw_text(x-(8*6),y+(8*19),"Toggle Gradius V-styled#                   Options.");
            }
        else if mpos==3
            {
            draw_text(x-(8*6),y+(8*19),"If enabled, give the player#a Force Field#             for every life.##Also, all Force Fields will#    take up to 10 hits.");
            }
        else if mpos==4
            {
            draw_text(x-(8*6),y+(8*19),"Set the Window Size.#Alt+Enter toggles fullscreen.");
            }
        else if mpos==5
            {
            draw_set_color($ff33cc);
            draw_text(x-(8*6),y+(8*19),"Configure your controls.");
            draw_set_color(c_gray);
            draw_text(x-24,y+(8*21),"Note: Custom controls are#only effective in-game!");
            draw_set_color($ff33cc);
            }
        else if mpos==6
            {
            draw_text(x-(8*6),y+(8*19),"Save the current settings.");
            }
        else if mpos==7
            {
            draw_text(x-(8*6),y+(8*19),"Discard changes and return.");
            }
        }
        
    }

    draw_set_color($83F52C);
    if currentMenu==1 draw_text(x+space,(y+mpos*space)+64,string(menu[mpos]));
    else if currentMenu==2 draw_text(x+space,(y+mpos*space)+64,string(menu2[mpos]));
        
    draw_sprite(sprCursor,0,sineX-14,(y+mpos*space)+64-2);
}
else if currentMenu==0
{
    if global.tick%70==0 //Do this every 50 frames the game is running
    {
        blinkTimer=60;
    }
    if blinkTimer&gt;0 {blinkTimer--; draw_text(x+(8*2),y+(8*14),"Press Enter");}
    
    
}

if currentMenu==3
{
    numConfigOptions=8; //Keep track of how many button configs should be visible so we can hide irrelevant controls.
    if (global.grVOptEnabled){numConfigOptions=9;}
    setControls();
    draw_text(x,y+(8*9),"Up: " + string(global.keyUp));
    draw_text(x,y+(8*10),"Left: " + string(global.keyLeft));
    draw_text(x,y+(8*11),"Down: " + string(global.keyDown));
    draw_text(x,y+(8*12),"Right: " + string(global.keyRight));
    draw_text(x,y+(8*13),"Shoot / Cancel: " + string(global.keyAction1));
    draw_text(x,y+(8*14),"Powerup / Confirm: " + string(global.keyAction2));
    if (global.grVOptEnabled)
    {
    draw_text(x,y+(8*15),"Option: " + string(global.keyAction3));
    draw_text(x,y+(8*16),"Pause: " + string(global.keyPause));
    }
    else
    {
    draw_text(x,y+(8*15),"Pause: " + string(global.keyPause));
    }
    
    draw_set_color(c_gray);
    draw_text(x-24,y+(8*18),"Press Esc to cancel.###Note: Custom controls are#only effective in-game!");
    if (configCount&lt;numConfigOptions &amp;&amp; currentConfig&gt;0) draw_sprite(sprCursor,0,sineX-22,y+((configCount+8)*8)-2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
