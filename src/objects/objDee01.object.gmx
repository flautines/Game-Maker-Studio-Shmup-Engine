<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objEnemyParent</parentName>
  <maskName>sprDee01</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Declare some variables
event_inherited();
direction = 0;
isRed = false;
active = false;
HP = 1;
nextFire = 0;
silentKill = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (global.state != states.startRoom &amp;&amp; !objMain.cleaningRoom &amp;&amp; !silentKill)
    {
    global.playerScore += 100;
    audio_stop_sound(sfxEnemyDestroyed);
    audio_play_sound(sfxEnemyDestroyed,1,false);
    //Upon destruction, spawn an explosion to the closest 8x8 tile
    //Swap the line below with the one just under it to change behavior
    //thisExplosion = instance_create(floor(x/8)*8,floor(y/8)*8,obj16x16Explosion);
    thisExplosion = instance_create(x,y,obj16x16Explosion); //Spawn explosion exactly where the enemy died
    thisExplosion.wasRed = isRed;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Take code from parent objEnemy and handle movement
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation and behavior

//Set the first frame of the sprite to distinguish between red/non-red Dees
var imgIndex = 11;
if (isRed)
{
    imgIndex = 0;
}

//Set relative frame the sprite should "look at" the player

if (direction&gt;180 &amp;&amp; direction&lt;270)
{direction = 180;}
if (direction&lt;0 || direction&gt;270)
{direction = 0;}
var frameOffset = direction/16;
if frameOffset&gt;10{frameOffset=10;}
frameOffset = floor(frameOffset);

imgIndex += frameOffset;

image_index = imgIndex;

if (active &amp;&amp; global.state == states.gameMode)
{
    //Shoot bullets at the player, at a random rate
    if (nextFire &lt;= 0)
    {
    var thisEnemyBullet = instance_create(x,y,objEnemyBullet);
    thisEnemyBullet.direction = direction - irandom(15) + irandom(20);
    nextFire = 33 + (irandom(3)*irandom(66) + irandom(73) + irandom(94) + (irandom(9)*4));
    }
    nextFire--;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
