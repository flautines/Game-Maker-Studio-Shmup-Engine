<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objBossParent</parentName>
  <maskName>sprBoss1</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
active = false; //Active if object is on the camera
enabled = false; //Enabled if the object is in the correct spot to start running its code
nextFire = 0;
image_speed=0;

enum bOneStates
{
    initialize,
    shooting,
    moving,
    death
}

dirY = -1;
bossState=bOneStates.initialize;
movingY = -1; //Upward

myID = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Determine a target player to look at.
lookAtPlayer();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !(global.state = states.startRoom)
{
    if myID==1
    {
        global.playerScore += 2500;
        
        if (validateWin())
        {
            //Only trigger if we've successfully beaten the boss (at least one player is still alive)
            global.currentMap = "beatBoss1";
            objMain.mapSwitchTimer = 250;
            audio_stop_sound(global.currentSong);
            global.currentSong = -99;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Upon destruction, depending which game loop we're on, fire some extra bullets

if myID==1
{
    var bulletsToFire=3;
    switch(objMain.loopCounter)
    {
        case 0: bulletsToFire=0; break;
        case 1: bulletsToFire=0; break;
        case 2: bulletsToFire=1; break;
        case 3: bulletsToFire=2; break;
        case 4: bulletsToFire=3; break;
        case 5: bulletsToFire=4; break;
    }
    
    for (var i=bulletsToFire*3; i&gt;0; i--)
    {
        var thisEnemyBullet = instance_create(x,y,objEnemyBullet);
        thisEnemyBullet.direction = direction - irandom(15) + irandom(20);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delete the boss barrier if it's still on the screen, but do not reward points
if instance_exists(objBossBarrier)
{
    with (objBossBarrier)
    {
    thisExplosion = instance_create(x,y,obj16x16Explosion);
    thisExplosion.wasRed = false; //Don't give the player a capsule on destruction
    instance_destroy();
    }
    audio_stop_sound(sfxEnemyDestroyed);
    audio_play_sound(sfxEnemyDestroyed,0,false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Take code from parent objBossParent
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Always look at the player

if (target.dead)
{
    lookAtPlayer(); //Attempt to find a new player to look at if our current one is dead
}

with (target)
{
    other.direction = point_direction(other.x, other.y, x, y);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Boss routine

if (global.state = states.startRoom)
{
    instance_destroy(); //This boss shouldn't exist if the player's only starting the level.
}

image_index = myID-1;

if (global.state == states.gameMode &amp;&amp; active)
{
    if (myID==1)
    {
        if instance_exists(objBossEye)
        {
            objBossEye.x = x+1;
            objBossEye.y = y+14;
        }
        if instance_exists(objBossBarrier)
        {
        var i;
        
        for (i = 0; i &lt; instance_number(objBossBarrier); i += 1)
           {
            thisBarrier = instance_find(objBossBarrier,i);
            thisBarrier.x = x-16-(4*i);
            thisBarrier.y = y+11;
           }
        }

        switch(bossState)
        {
            case bOneStates.initialize:
                if (objCamera.x&gt;=x-192)
                {
                    objCamera.scrollX=0;
                    bossState=bOneStates.moving;
                    enabled = true;
                }
                break;
            case bOneStates.shooting:
                if (nextFire &lt;= 0)
                {
                audio_stop_sound(sfxBossShot);
                audio_play_sound(sfxBossShot,0,false);
                instance_create(x+8+1,y-16+14, objBossLaser);
                instance_create(x-8+1,y-8+14, objBossLaser);
                instance_create(x-8+1,y+8+14, objBossLaser);
                instance_create(x+8+1,y+16+14, objBossLaser);
                nextFire = 100;
                
                    if (y&lt;objPlayer.y || y&gt;objCamera.y+objCamera.viewportHeight-32)
                    {
                        dirY = -1;
                    }
                    else if (y&gt;objPlayer.y || y&lt;objCamera.y+32)
                    {
                        dirY = 1;
                    }
                    else
                    {
                        dirY = 0;
                    }
                    
                }
                
                if (nextFire &lt;= 50 &amp;&amp; nextFire&gt;0)
                {
                bossState=bOneStates.moving;
                }
                
                if (instance_number(objBossEye)&lt;=0 &amp;&amp; !dead){bossState = bOneStates.death; alarm[0]=150; dead=true;}
                break;
            case bOneStates.moving:
                
                if (y&lt;objCamera.y+32 || y&gt;objCamera.y+objCamera.viewportHeight-64)
                {dirY = -dirY;} //Reverse direction if we hit a screen boundary
                
                y+=movingY * dirY;
                if instance_exists(objBossEye)
                {objBossEye.y+=movingY * dirY;}
                if instance_exists(objBossBarrier)
                {objBossBarrier.y+=movingY * dirY;}
                
                if (nextFire &lt;= 0)
                {
                bossState=bOneStates.shooting;
                }
                
                if (instance_number(objBossEye)&lt;=0 &amp;&amp; !dead){bossState = bOneStates.death; alarm[0]=150; dead=true;}
                break;
            case bOneStates.death:
                dead=true;
            default:
            break;
        }
        var cutBreaks = objMain.loopCounter
        if (cutBreaks &gt; 10) {cutBreaks = 10;}
        if (cutBreaks &lt; 1) {cutBreaks = 1;}
        nextFire-=cutBreaks;
        
        if (alarm[0]&gt;25 &amp;&amp; global.tick%11==0)
            {
                //Every 12 frames, spawn an explosion relative to the boss' position
                var xRand = irandom(32)*irandom(-1);
                var yRand = irandom(32)*irandom(-1);
                instance_create(x+xRand,y+yRand,objBigExplosion);
            }
            else if (alarm[0]&lt;=25 &amp;&amp; alarm[0]&gt;0 &amp;&amp; global.tick%4==0)
            {
                //Explode even faster on the last 14 frames
                var xRand = irandom(32)*irandom(-1);
                var yRand = irandom(32)*irandom(-1);
                instance_create(x+xRand,y+yRand,objBigExplosion);
            }
    }
}

//Shared between the 3 pieces of the boss, but controlled by one only

if (myID==1)
{
    objBoss1.alarm[0] = alarm[0]; //Share death
    //The first piece's x/y is shared with the rest
    objBoss1.y = y;
    objBoss1.x = x;
}

if (myID==2)
{
    y+=28;
}
if (myID==3)
{
    y+=22;
    mask_index = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
