<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprLaser</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Declare some variables
timeAlive = 60;
xSpeed = 0;
ySpeed = 0;
length = 1;
laserEnd = false;
cycImgIndex = 0;
bulletStrength = 3;
playedSFX = false; //Specifically for Twin and Ripple Laser
rippleTimeAlive = 0;
rippleActivateTime = 14;
if (objMain.laserType==4)
{
    mask_index = sprTwinLaser;
}
else if (objMain.laserType==2)
{
    mask_index = sprRippleLaser;
    image_yscale = 16/48;
    xScaleMod = 1;
    yScaleMod = 0;
}
else
{
    if !audio_is_playing(sfxLaser)
    {
        audio_play_sound(sfxLaser,2,false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///For Ripple/Twin, decrement the shoot counter of the gun it came from
if (objMain.laserType==2 || objMain.laserType==4)
{
    with (parentGun)
    {
        shootLaserCounter--;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Standard and Cyclone

if ((global.state==states.cutscene || global.state == states.gameMode) &amp;&amp; (objMain.laserType==1 || objMain.laserType==3))
{
    if (global.tick%3==0)
    {
    cycImgIndex=!cycImgIndex; //lol bool animation
    }
    
    y+=ySpeed+objCamera.scrollY;
    
    with (parentGun)
        {
            other.x += objPlayer.hsp+objCamera.scrollX;

            switch(myID)
            { //Find out which turret this laser came from so we can set x/y position directly
            case 0:
                other.y = y-1 + objPlayer.vsp+objCamera.scrollY;
                break;
            case 1:            
                other.y = objPlayer.prevY[9]-1;
                break;
            case 2:            
                other.y = objPlayer.prevY[19]-1;
                break;
            case 3:            
                other.y = objPlayer.prevY[29]-1;
                break;
            case 4:            
                other.y = objPlayer.prevY[39]-1;
                break;
            default: break;
            }
        }
    
    if (!laserEnd)
    {
        if (objMain.keyP1Action1 &amp;&amp; timeAlive&gt;0) &amp;&amp; //TODO: Fix for Player 2
            (self.x+objCamera.scrollX+xSpeed+length&lt;objCamera.x+256 &amp;&amp;
                !(placeMeeting(0,0,"solid") &amp;&amp; placeMeeting(0,0,"solid"))
            )
        {
            length+=3;
            with (parentGun)
            {laserCooldownTimer+=2;
                switch(myID)
                { //Find out which turret this laser came from so we can set x/y position directly
                case 0:
                    other.x = x+objCamera.scrollX;
                    break;
                case 1:
                    other.x = objPlayer.prevX[9];
                    break;
                case 2:
                    other.x = objPlayer.prevX[19];
                    break;
                case 3:
                    other.x = objPlayer.prevX[29];
                    break;
                case 4:
                    other.x = objPlayer.prevX[39];
                    break;
                default: break;
                }
            }
            timeAlive--;
        }
        else
        {
            x+=xSpeed+objCamera.scrollX;
            xSpeed = 12;
            laserEnd = true;
        }
        
        
        if (placeMeeting(length,0,"solid"))
        {
            length = (((x+length)/16)*16)-x; //Distance between the tile and the actual laser position (Length = TileXPosition - Laser X position)
        }
    }
    else
    {
    x+=xSpeed+objCamera.scrollX;
    }

    if placeMeeting(0,0,"solid")
    {instance_destroy();}      
    
    if (self.x+objCamera.scrollX+xSpeed&gt;objCamera.x+256) //Shorten the laser as it gets too far off the screen
    {
        length-=3;
    }
    
    if length&lt;=0 //As the laser ends entirely off the screen, self-destruct to clear memory
    {
        instance_destroy();
    }
    
    image_xscale = length;
    
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Twin Laser

if ((global.state==states.cutscene || global.state == states.gameMode) &amp;&amp; objMain.laserType==4)
{
    if (!playedSFX)
    {
        shootSound(sfxLaser,2,false);
        xSpeed = 6;
    }
    y+=ySpeed+objCamera.scrollY;
    x+=xSpeed+objCamera.scrollX;
    if placeMeeting(0,0,"solid")
    {instance_destroy();}      
    
    if (self.x+objCamera.scrollX+xSpeed&gt;objCamera.x+objCamera.viewportWidth+16) //Shorten the laser as it gets too far off the screen
    {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ripple Laser

if ((global.state==states.cutscene || global.state == states.gameMode) &amp;&amp; objMain.laserType==2)
{
    if (!playedSFX)
    {
        shootSound(sfxLaser,2,false);
        xSpeed = 6;
    }

    if ((rippleTimeAlive-rippleActivateTime)%4 == 0)
    {
        yScaleMod++;
    }
    rippleTimeAlive++;
    
    if yScaleMod&gt;4{yScaleMod = 4;}
    xScaleMod = yScaleMod;
    if yScaleMod&gt;3{xScaleMod = 3;}
    else if yScaleMod&lt;1{xScaleMod = 1;}
    
    image_xscale = (8 + (2*xScaleMod))/14;
    image_yscale = ((16 + (yScaleMod*8))/48);
    
    y+=ySpeed+objCamera.scrollY;
    x+=xSpeed+objCamera.scrollX;
    if placeMeeting(0,0,"solid")
    {instance_destroy();}      
    
    if (self.x+objCamera.scrollX+xSpeed&gt;objCamera.x+objCamera.viewportWidth+16) //Shorten the laser as it gets too far off the screen
    {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
