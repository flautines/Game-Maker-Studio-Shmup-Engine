<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objEnemyParent</parentName>
  <maskName>spr16x16</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

///Initialize some variables
silentKill = false;

//Next time to fire a bullet
//The modifier is for game balancing. Change it here!
loopCap=objMain.loopCounter;
if loopCap&gt;10{loopCap=10;}

nextFireModifier = 33 + ((irandom(88)/loopCap)*irandom(21) + irandom(56) + (irandom(88)/loopCap) + (irandom(9)*2 + (loopCap*0.7))/loopCap);
nextFire = nextFireModifier;

patternType = 1; //Changes movement behavior of the sprite
                 //On level spawning, this value changes depending which version was placed on the map

active = false; //Determines if the enemy is allowed to move at all or not

timeAlive = -1; //Timer-based movement scripting variable

lagFrames = 0; //Frames to lag behind the player (automatically set in the placeSprites() script)

moveSpeedX=1.5; //How fast the Beans move along the X axis
moveSpeedY=1.5; //How fast the Beans move along the Y axis
//Directional variables
movingX = 0;
movingY = 0;

myID="";
groupID = "0";
created = false;
HP = 1;
isRed = false;
image_index = 0;
image_speed = 0.24 * objMain.deltaTime;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
event_inherited();

if (global.state != states.startRoom &amp;&amp; !objMain.cleaningRoom &amp;&amp; !silentKill)
    {
    global.playerScore += 100;
    audio_stop_sound(sfxEnemyDestroyed);
    audio_play_sound(sfxEnemyDestroyed,1,false);
    //Upon destruction, spawn an explosion to the closest 8x8 tile
    //Swap the line below with the one just under it to change behavior
    //thisExplosion = instance_create(floor(x/8)*8,floor(y/8)*8,obj16x16Explosion);
    thisExplosion = instance_create(x,y,obj16x16Explosion); //Spawn explosion exactly where the enemy died
    thisExplosion.wasRed = isRed;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Always look at the player
if instance_exists(objPlayer)
{
    if (!objPlayer.dead)
    {
    direction = point_direction(x, y, objPlayer.x, objPlayer.y);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main code
image_speed = 0.24 * objMain.deltaTime;

//This bean becomes red (gives a capsule) if it's the last one remaining and gets destroyed
if groupID == "0"
{instance_destroy();}
var setActive = false;

if (!isRed)
{
    var groupCount = 0;
    
    //Check every single instance of objBean and count how many were in this group
    for (i = 0; i &lt; instance_number(objBean); i++)
    {
        thatBean = instance_find(objBean,i);
        if (thatBean.groupID == groupID) //Compare every bean with our own and see if it's in our group
        {
            groupCount++; //Amend to the number of enemies in the group
            
            if (thatBean.active == true) //If one is active, the whole group is active
            {
                setActive=true;
            }
            active = setActive;
        }
        
        
    }
    
    

    if groupCount&lt;=1 //If we're the last in our group, we're now red, and give the player a capsule
    {
    isRed = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement pattern 1
if (patternType == 1)
{
    if (global.state == states.gameMode)
    {
        if (active)
        {
        
            timeAlive++;
        
            
            x+=objCamera.scrollX; //Follow the camera, no matter how fast it's going
            var moveToPlayer = false;
            
            if ((timeAlive-lagFrames)&lt;0){movingX=-moveSpeedX;}
            
            switch(timeAlive-lagFrames)
            {
                case 0: movingX=-moveSpeedX; movingY=0;
                break;
                case 40: moveToPlayer = true;
                break;
                case 60: movingX=-moveSpeedX; movingY=0;
                break;
                case 140: moveToPlayer = true;
                break;
                case 160: movingY=0;
                break;
                default: break;
            }
            if (x&lt;=objCamera.x+8)
            {
                movingX = moveSpeedX; //Retreat to the right of the screen
            }
            
            if (x&gt;objCamera.x+objCamera.viewportWidth+32 &amp;&amp; movingX &gt; 0)
            {silentKill=true; instance_destroy();} //Destroy if too far to the right while retreating
            
            if (moveToPlayer)
            {
                if (y&gt;objPlayer.y)
                {
                    movingY = -moveSpeedY;
                }
                else
                {
                    movingY = moveSpeedY;
                }
            }
            
            if ((y&lt;=objCamera.y+objCamera.upperBound) || (y&gt;=objCamera.y+objCamera.viewportHeight-objCamera.lowerBound))
            {
                movingY = -movingY;
            }
                
            x+=movingX;
            y+=movingY;
            
            //Shoot bullets at the player, at a random rate
            if objMain.loopCounter&gt;1
            {
                if (nextFire &lt;= 0 &amp;&amp; x&lt;objCamera.x+objCamera.viewportWidth+16)
                {
                var thisEnemyBullet = instance_create(x,y,objEnemyBullet);
                thisEnemyBullet.direction = direction - irandom(15) + irandom(20);
                nextFire = nextFireModifier;
                }
            }
            nextFire--;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement pattern 2
if (patternType == 2)
{
    if (global.state == states.gameMode)
    {
        if (active)
        {
        
            timeAlive++;
        
            
            x+=objCamera.scrollX; //Follow the camera, no matter how fast it's going
            var moveToPlayer = false;
            
            if ((timeAlive-lagFrames)&lt;0){movingX=-moveSpeedX;}
            
            switch(timeAlive-lagFrames)
            {
                case 0: movingX=-moveSpeedX; movingY=0;
                break;
                case 40: moveToPlayer = true;
                break;
                case 60: movingX=-moveSpeedX; movingY=0;
                break;
                case 140: moveToPlayer = true;
                break;
                case 160: movingY=0;
                break;
                default: break;
            }
            if (x&lt;=objCamera.x+8)
            {
                movingX = moveSpeedX; //Retreat to the right of the screen
            }
            
            if (x&gt;objCamera.x+objCamera.viewportWidth+32 &amp;&amp; movingX &gt; 0)
            {silentKill=true; instance_destroy();} //Destroy if too far to the right while retreating
            
            if (moveToPlayer)
            {
                if (y&gt;objPlayer.y)
                {
                    movingY = -moveSpeedY;
                }
                else
                {
                    movingY = moveSpeedY;
                }
            }
            
            if ((y&lt;=objCamera.y+objCamera.upperBound) || (y&gt;=objCamera.y+objCamera.viewportHeight-objCamera.lowerBound))
            {
                movingY = -movingY;
            }
                
            x+=movingX;
            y+=movingY;
            
            //Shoot bullets at the player, at a random rate
            if objMain.loopCounter&gt;1
            {
                if (nextFire &lt;= 0 &amp;&amp; x&lt;objCamera.x+objCamera.viewportWidth+16)
                {
                var thisEnemyBullet = instance_create(x,y,objEnemyBullet);
                thisEnemyBullet.direction = direction - irandom(15) + irandom(20);
                nextFire = nextFireModifier;
                }
            }
            nextFire--;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Take code from parent objEnemy and handle movement
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
