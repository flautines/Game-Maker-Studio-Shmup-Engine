<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Declare some variables
myID = instance_number(objOption);
enabled = true; //Disable use until the player acquires this ability
shootDelayTimer=0;
shootCounter=0;
shootCounterMaxWithoutDouble=2;
shootCounterMaxWithDouble=1;
shootCounterMax=shootCounterMaxWithoutDouble;
shootDoubleDelayTimer=0;
shootDoubleCounter=0;
shootDoubleCounterMax=1;
laserCooldownTimer=0;
missileDelayTimer=0;
missileCounter=0;
missileCounterMax=2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Basic movement code
if (global.state == 2 || global.state == 3)
{
image_speed=0.17;
//Trail behind the player, even when inactive (to prevent them from zooming in when they get enabled)
//(GRV-Style Option Movement code is in the objPlayer Step event)
switch(myID)
{
case 1:
    x = objPlayer.prevX[9];
    y = objPlayer.prevY[9];
    break;
case 2:
    x = objPlayer.prevX[19];
    y = objPlayer.prevY[19];
    break;
case 3:
    x = objPlayer.prevX[29];
    y = objPlayer.prevY[29];
    break;
case 4:
    x = objPlayer.prevX[39];
    y = objPlayer.prevY[39];
    break;
default: break;
}


if (enabled &amp;&amp; !objPlayer.dead)
{
    //Let's shooting!
    if (!objPlayer.hasLaser)
    {
        if (keyboard_check(global.keyAction1))
        {
            if (shootDelayTimer&lt;=0 &amp;&amp; shootCounter&lt;shootCounterMax)
            {
                thisBullet = instance_create(x+objPlayer.hsp,y+objPlayer.vsp,objBullet);
                thisBullet.parentGun = id; //Tell every bullet which gun they came from for their Destroy Event
                                            //Upon its destruction, the bullet decrements the gun (in this case, the Option)'s shooting counter.
                shootCounter++;
                shootDelayTimer=4;
            }
            else
            {shootDelayTimer--;}
        }
        if (keyboard_check_released(global.keyAction1))
        {shootDelayTimer=0;}
    }
    else
    {
        //Laser
        if keyboard_check(global.keyAction1) &amp;&amp; laserCooldownTimer &lt;=0
        {
            laserCooldownTimer=1;
            thisLaser = instance_create(x+objPlayer.hsp,y+objPlayer.vsp-1,objLaser);
            thisLaser.laserType = 1; //Your standard gradius laser. Assume 2 is "CLaser"
            thisLaser.parentGun = id;
        }
        else if (laserCooldownTimer &gt;0)
        {laserCooldownTimer--;}
    }
    
    //Double
    if (objPlayer.hasDouble)
    {
        shootCounterMax=shootCounterMaxWithDouble;
        if (keyboard_check(global.keyAction1))
        {
            if (shootDoubleDelayTimer&lt;=0 &amp;&amp; shootDoubleCounter&lt;shootDoubleCounterMax)
            {
                thisBullet = instance_create(x+objPlayer.hsp,y+objPlayer.vsp,objDouble);
                thisBullet.parentGun = id;
                shootDoubleCounter++;
                shootDoubleDelayTimer=4;
            }
            else
            {shootDoubleDelayTimer--;}
        }
    }
    else{shootCounterMax=shootCounterMaxWithoutDouble}
    
    //Missile
    if (objPlayer.hasMissile)
    {
        if (keyboard_check(global.keyAction1))
        {
            if (missileDelayTimer&lt;=0 &amp;&amp; missileCounter&lt;missileCounterMax)
            {
                thisBullet = instance_create(x+objPlayer.hsp,y+objPlayer.vsp,objMissile);
                thisBullet.parentGun = id;
                missileCounter++;
                missileDelayTimer=4;
            }
            else
            {missileDelayTimer--;}
        }
        if (keyboard_check_released(global.keyAction1))
        {missileDelayTimer=0;}
    }
}
}
else
{image_speed=0;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
