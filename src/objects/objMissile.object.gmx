<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprMissile</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0; //Unused; keep at 0 to prevent glitchy animation
image_index = 0; //Initial frame animation starts on
//Instead, we'll handle these variables manually.
imgIndex=0;
imgSpeed=0.2;

bulletStrength = 3;
landedGround = false;
silentKill = false;

playedSFX = false;
vsp = 3;
hsp = 3;
grav = 0;
yOffset = 0; //Graphical modification for whenever the missile is on the ground

afterFromShip = false; //animation flag for Photon Torpedo
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///As our missile is being destroyed, decrement the shoot counter of the gun it came from
with (parentGun)
{
    if (objMain.missileType==3)
    {
        missileCounter-=2;
    }
    else
    {
        missileCounter--;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create a Spread Bomb Explosion
if (global.state == states.gameMode)
{
    if (objMain.missileType==3 &amp;&amp; !silentKill)
    {
        var thisExplosion = instance_create(x,y,objSpreadExplosion);
        thisExplosion.parentGun = parentGun;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Standard Missile

if (global.state == states.gameMode)
{
    if objMain.missileType == 1
    {
        landedGround = false;
        
        if (x&gt;=0 &amp;&amp; y&gt;=0 &amp;&amp; x&lt;=global.mapWidth*global.tileWidth &amp;&amp; y&lt;=global.mapHeight * global.tileHeight)
        {
            if placeMeeting(0,vsp,"solid")
            {y=floor(y/16)*16+8;landedGround=true;}
            if placeMeeting(1,0,"solid")
            {instance_destroy();}
        }
    
        if (!landedGround)
        {
            y+=vsp;
            x+=1;
            image_index = 2;
            yOffset = 0;
        }
        else
        {x+=hsp; image_index = 0; yOffset = 4;}
            
        if (x&gt;objCamera.x+objCamera.viewportWidth+64 || y&gt;objCamera.y+objCamera.viewportHeight+12)
        {
            instance_destroy();
        }
        
        if (!playedSFX)
        {
            shootSound(sfxMissile,2,false);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///2-Way Missile

if (global.state == states.gameMode)
{
    if (objMain.missileType == 2)
    {
        //Animate
        if (imgIndex&lt;sprite_get_number(sprMissile)-1)
        {
            imgIndex+=imgSpeed;    
        }
        image_index=imgIndex;
        
        if (grav&lt;9.81)
        {
        grav+=0.15;
        }
        vsp = grav;
        
        if (myID == 2)
        {
            vsp = -grav;
            image_yscale = -1;
        }
        
        hsp = 1;
        
        //Move the missile
        y+=vsp;
        x+=hsp;
        
        //Destroy self if we hit any wall
        if (x&gt;=0 &amp;&amp; y&gt;=0 &amp;&amp; x&lt;=global.mapWidth*global.tileWidth &amp;&amp; y&lt;=global.mapHeight * global.tileHeight)
        {
            if placeMeeting(0,0,"solid")
            {instance_destroy();}
        }
        
        //Destroy self if we're too far off the camera bounds    
        if (x&gt;objCamera.x+objCamera.viewportWidth+64 ||
            y&gt;objCamera.y+objCamera.viewportHeight+12 ||
            y&lt;objCamera.y-12)
        {
            instance_destroy();
        }
        
        if (!playedSFX)
        {
            shootSound(sfxMissile,2,false);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spread Bomb
if (global.state == states.gameMode)
{
    if (objMain.missileType == 3)
    {
        //Animate
        if (imgIndex&lt;sprite_get_number(sprMissile)-1)
        {
            imgIndex+=imgSpeed;    
        }
        image_index=imgIndex;
        
        if (grav&lt;9.81)
        {
        grav+=0.15;
        }
        vsp = grav;
        
        hsp = 2.5;
        
        //Move the missile
        y+=vsp;
        x+=hsp;
        
        //Destroy self if we hit any wall
        if (x&gt;=0 &amp;&amp; y&gt;=0 &amp;&amp; x&lt;=global.mapWidth*global.tileWidth &amp;&amp; y&lt;=global.mapHeight * global.tileHeight)
        {
            if placeMeeting(0,0,"solid")
            {instance_destroy();}
        }
        
        //Destroy self if we're too far off the camera bounds    
        if (x&gt;objCamera.x+objCamera.viewportWidth+64 ||
            y&gt;objCamera.y+objCamera.viewportHeight+12 ||
            y&lt;objCamera.y-12)
        {
            silentKill = true;
            instance_destroy();
        }
        
        if (!playedSFX)
        {
            shootSound(sfxMissile,2,false);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Photon Torpedo
if (global.state == states.gameMode)
{
    if objMain.missileType == 4
    {
        landedGround = false;
        
        if (x&gt;=0 &amp;&amp; y&gt;=0 &amp;&amp; x&lt;=global.mapWidth*global.tileWidth &amp;&amp; y&lt;=global.mapHeight * global.tileHeight)
        {
            if placeMeeting(0,vsp,"solid")
            {y=floor(y/16)*16+8;landedGround=true;}
            if placeMeeting(1,0,"solid")
            {instance_destroy();}
        }
    
        if (!landedGround)
        {
            y+=vsp;
            
            if (!afterFromShip)
            {
            image_index = 0;
            x-=0.2;
            }
            else
            {
            image_index = 2;
            x+=1;
            }
            yOffset = 0;
        }
        else
        {x+=hsp; image_index = 0; afterFromShip = true; yOffset = 4;}
            
        if (x&gt;objCamera.x+objCamera.viewportWidth+64 || y&gt;objCamera.y+objCamera.viewportHeight+12)
        {
            instance_destroy();
        }
        
        if (!playedSFX)
        {
            shootSound(sfxMissile,2,false);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
